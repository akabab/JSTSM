{% if header -%}
//
//  {{ modelName }}.swift
//  {{ header.projectName }}
//
//  Created by {{ header.author }} on {{ header.now }}.
//  Copyright Â© {{ header.copyright }}. All rights reserved.
//
{% endif -%}
//
//  This file has been generated, modify it at your own risks!
//  Generated by JSTSM - https://github.com/akabab/JSTSM
//

{{ "struct" if isStruct else "class" }} {{ modelName }}{{ ": " if extends }}
{%- if extends -%}
  {%- for ext in extends -%}
    {{ ", " if not loop.first }}{{ ext }}
  {%- endfor -%}
{%- endif %} {

  // MARK: - Properties
{% for p in properties %}
  {%- if p.isArr %}
  var {{ p.key }}: [{{ p.type }}]{{ "?" if not p.required }}

  {%- else %}
  var {{ p.key }}: {{ p.type }}{{ "?" if not p.required }}

  {%- endif %}
{% endfor %}

  // MARK: - Inits

  {{"required " if not isStruct }}init(json: [String: AnyObject]) throws {
  {% for p in properties %}

    // Parsing '{{ p.key }}' [{{ "required" if p.required else "optional" }}]
    {%- if p.isArr %}

      {%- if p.isRef %}

        {%- if p.required %}
    guard let {{ p.key }}JSON = json["{{ p.key }}"] as? [AnyObject] else {
      throw JSONDecodingError.missing("{{ p.key }}")
    }

    var {{ p.key }}: [{{ p.type }}] = []
    for _elemJSON in {{ p.key }}JSON {
      guard let elemJSON = _elemJSON as? [String: AnyObject] else {
        throw JSONDecodingError.invalid("{{ p.key }}", _elemJSON)
      }

      let elem = try {{ p.type }}(json: elemJSON)
      {{ p.key }} += [elem]
    }

    self.{{ p.key }} = {{ p.key }}

        {%- else %} {# !required #}
    if let {{ p.key }}JSON = json["{{ p.key }}"] as? [AnyObject] {

      var {{ p.key }}: [{{ p.type }}] = []
      for _elemJSON in {{ p.key }}JSON {
        guard let elemJSON = _elemJSON as? [String: AnyObject] else {
          throw JSONDecodingError.invalid("{{ p.key }}", _elemJSON)
        }

        let elem = try {{ p.type }}(json: elemJSON)
        {{ p.key }} += [elem]
      }

      self.{{ p.key }} = {{ p.key }}
    }
        {%- endif %} {# end required #}

      {%- else %} {# !isRef #}

        {%- if p.required %}
    guard let {{ p.key }} = json["{{ p.key }}"] as? [{{ p.type }}] else {
      throw JSONDecodingError.missing("{{ p.key }}")
    }

    self.{{ p.key }} = {{ p.key }}

        {%- else %} {# !required #}
    self.{{ p.key }} = json["{{ p.key }}"] as? [{{ p.type }}]

        {%- endif %} {# end required #}

      {%- endif %} {# end isRef #}

    {%- else %} {# !isArr #}

      {%- if p.isRef %}

        {%- if p.required %}
    guard let {{ p.key }}JSON = json["{{ p.key }}"] as? [String: AnyObject] else {
      throw JSONDecodingError.missing("{{ p.key }}")
    }

    self.{{ p.key }} = try {{ p.type }}(json: {{ p.key }}JSON)

        {%- else %} {# !required #}
    if let {{ p.key }}JSON = json["{{ p.key }}"] as? [String: AnyObject] {
      self.{{ p.key }} = try {{ p.type }}(json: {{ p.key }}JSON)
    }

        {%- endif %} {# end required #}

      {%- else %} {# !isRef #}

        {%- if p.required %}
    guard let {{ p.key }} = json["{{ p.key }}"] as? {{ p.type }} else {
      throw JSONDecodingError.missing("{{ p.key }}")
    }

    self.{{ p.key }} = {{ p.key }}

        {%- else %} {# !required #}
    self.{{ p.key }} = json["{{ p.key }}"] as? {{ p.type }}

        {%- endif %} {# !required #}

      {%- endif %} {# end isRef #}

    {%- endif %} {# end isArr #}
  {% endfor %}
  {%- if hasSuperClass %}

    // Init super class
    try super.init(json: json)
  {% endif %}
  }

}
